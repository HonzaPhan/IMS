@inject IAddProductUseCase AddProductUseCase
@inject NavigationManager NavigationManager

<EditForm Model="product" OnValidSubmit="Save">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="name">Product Name</label>
        <InputText id="name" @bind-Value="product.ProductName" class="form-control" />
        <ValidationMessage For="@(() => product.ProductName)" />
    </div>

    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity" @bind-Value="product.Quantity" class="form-control" />
        <ValidationMessage For="@(() => product.Quantity)" />
    </div>

    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price" @bind-Value="product.Price" class="form-control" />
        <ValidationMessage For="@(() => product.Price)" />
    </div>

    <div class="form-group">
        <label for="price">Inventories</label>
        <SearchProductInventoriesComponent />
    </div>
    <br />
    
    <button type="submit" class="btn btn-primary">Save</button>
    &nbsp;
    <a href="/inventories" class="btn btn-danger">Cancel</a>
</EditForm>

@code {
    private Product product { get; set; } = new Product();

    private async Task Save()
    {
        await AddProductUseCase.ExecuteAsync(product);
        NavigationManager.NavigateTo("/products");
    }
}