@inject NavigationManager NavigationManager

@if (Product != null)
{
    <EditForm Model="Product" FormName="formProduct" OnValidSubmit="() => Update(Product)">
        <DataAnnotationsValidator />

        <InputNumber @bind-Value="Product.ProductId" hidden />

        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="Product.ProductName" class="form-control" />
            <ValidationMessage For="@(() => Product.ProductName)" />
        </div>

        <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" @bind-Value="Product.Quantity" class="form-control" />
            <ValidationMessage For="@(() => Product.Quantity)" />
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="Product.Price" class="form-control" />
            <ValidationMessage For="@(() => Product.Price)" />
        </div>
        <br />

        <button type="submit" class="btn btn-primary">Update</button>
        &nbsp;
        <a href="/inventories" class="btn btn-danger">Cancel</a>
    </EditForm>
}


@code {
    [Parameter]
    public Product? Product { get; set; }

    [Parameter]
    public EventCallback OnUpdate { get; set; }

    private async Task Update(Product updatedProduct)
    {
        await OnUpdate.InvokeAsync(updatedProduct);
    }
}
