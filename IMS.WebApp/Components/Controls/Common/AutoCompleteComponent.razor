<div class="form-group">
    <label for="search">@Label</label>
    <input type="text" class="form-control" @bind-value="userInput" @bind-value:event="oninput" @onkeyup="ActionOnKeyPress" />
</div>

@if (searchResults?.Count > 0)
{
    <div class="search-result">
        <ul>
            @for (int i = 0; i < searchResults.Count; i++)
            {
                var item = searchResults[i];
                <li @key="item.Id"
                    class="@(i == currentItemIndex ? "selected" : "")"
                    @onclick="() => HandleSelectItem(item)">
                    @item.Name
                </li>
            }
        </ul>
    </div>
}

@code {
    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public Func<string, Task<List<ItemViewModel>>>? SearchFunction { get; set; }

    [Parameter]
    public EventCallback<ItemViewModel> OnItemSelected { get; set; }

    private List<ItemViewModel>? searchResults = null;
    private ItemViewModel? selectedItem = null;
    private ItemViewModel? currentItem = null;
    private int currentItemIndex = -1;
    private string _userInput = string.Empty;

    public string userInput
    {
        get => _userInput;
        set
        {
            _userInput = value;
            UpdateSearchResults();
        }
    }

    private async Task UpdateSearchResults()
    {
        if (!string.IsNullOrEmpty(_userInput) && SearchFunction != null)
        {
            await ViewItemsAsync();
        }
    }

    private async Task ViewItemsAsync()
    {
        if (SearchFunction != null)
        {
            searchResults = await SearchFunction(userInput);

            StateHasChanged();
        }
    }

    private void HandleSelectItem(ItemViewModel item)
    {
        ClearHighlight();

        selectedItem = item;
        userInput = item.Name;
        searchResults = null;
        currentItemIndex = -1;

        OnItemSelected.InvokeAsync(item);
    }

    private void ClearHighlight()
    {
        searchResults = null;
        currentItem = null;
        currentItemIndex = -1;
    }

    private void ActionOnKeyPress(KeyboardEventArgs e)
    {
        if (searchResults?.Count > 0)
        {
            switch (e.Code)
            {
                case "ArrowDown":
                    MoveSelection(1);
                    break;
                case "ArrowUp":
                    MoveSelection(-1);
                    break;
                case "Enter":
                case "NumpadEnter":
                    if (currentItem != null)
                    {
                        HandleSelectItem(currentItem);
                    }
                    break;
            }
        }
    }

    private void MoveSelection(int direction)
    {
        currentItemIndex = Math.Clamp(currentItemIndex + direction, 0, searchResults.Count - 1);
        currentItem = searchResults[currentItemIndex];
    }

    public class ItemViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}
