@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase

<div class="input-group">
    <input @bind-value="searchFilter" @bind-value:event="oninput" class="form-control" placeholder="Type here to search..." />
    <div class="input-group-append">
        <button type="button" class="btn-success input-group-text" @onclick="HandleSearch">Search</button>
    </div>
</div>

@if (inventories != null && inventories.Count > 0)
{
    <div class="search-result">
        <ul>
            @foreach (Inventory inv in inventories)
            {
                <li @key="inv.InventoryId" @onclick="async() => { await HandleSelectInventory(inv); }">
                    @inv.InventoryName
                </li>
            }
        </ul>
    </div>
}

@code {
    [Parameter]
    public EventCallback<Inventory> OnSelectInventory { get; set; }

    private string _searchFilter;
    private string searchFilter
    { 
        get => _searchFilter;
        set
        {
            _searchFilter = value;
            HandleSearch();
        }
    }
    private List<Inventory> inventories = new List<Inventory>();

    private async Task HandleSearch()
    {
        inventories = (await ViewInventoriesByNameUseCase.ExecuteAsync(searchFilter)).ToList();

        StateHasChanged();
    }

    private async Task HandleSelectInventory(Inventory inventory)
    {
        await OnSelectInventory.InvokeAsync(inventory);

        inventories.Clear();
    }
}
