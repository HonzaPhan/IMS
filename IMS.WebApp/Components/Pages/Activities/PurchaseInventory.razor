@page "/purchase"

@using static IMS.WebApp.Components.Controls.Common.AutoCompleteComponent

@rendermode InteractiveServer

@inject IJSRuntime JSRuntime

@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase
@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase
@inject IPurchaseInventoryUseCase PurchaseInventoryUseCase

<h3>Purchase Inventory</h3>
<br />

<EditForm id="purchase-form" Model="purchaseViewModel" OnValidSubmit="Purchase">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="po">Purchase Order #</label>
        <InputText id="po" class="form-control" @bind-Value="purchaseViewModel.PONumber" />
    </div>
    
    <br />

    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <AutoCompleteComponent Label="Inventory"
                                       SearchFunction="SearchInventory"
                                       OnItemSelected="HandleItemSelected" />
                @if (purchaseViewModel.InventoryPrice > 0)
                {
                    <text>Price:</text>
                    @purchaseViewModel.InventoryPrice.ToString("c")
                }
            </div>
        </div>
    </div>
    <br />

    <div class="form-group">
        <label for="qty">Quantity</label>
        <InputNumber id="qty" class="form-control" @bind-Value="purchaseViewModel.QuantityToPurchase" />
    </div>
    <br />

    <button type="submit" class="btn btn-primary">Purchase</button>
</EditForm>

@code {
    private PurchaseViewModel purchaseViewModel = new PurchaseViewModel();

    private Inventory? selectedInventory = null;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("preventFormSubmission", "purchase-form");
        }
    }

    private async Task<List<ItemViewModel>>? SearchInventory(string name)
    {
        IEnumerable<Inventory> list = await ViewInventoriesByNameUseCase.ExecuteAsync(name);

        return list.Select(x => new ItemViewModel { Id = x.InventoryId, Name = x.InventoryName }).ToList();
    }

    private async Task HandleItemSelected(ItemViewModel item)
    {
        selectedInventory = await ViewInventoryByIdUseCase.ExecuteAsync(item.Id);

        purchaseViewModel.InventoryId = item.Id;
        purchaseViewModel.InventoryPrice = selectedInventory.Price;
    }

    private async Task Purchase()
    {
        await PurchaseInventoryUseCase.ExecuteAsync(purchaseViewModel.PONumber, selectedInventory, purchaseViewModel.QuantityToPurchase, "Honza");

        purchaseViewModel = new PurchaseViewModel();
        selectedInventory = null;
    }
}
